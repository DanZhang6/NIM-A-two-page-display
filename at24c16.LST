C51 COMPILER V7.08   AT24C16                                                               04/11/2016 13:25:07 PAGE 1   


C51 COMPILER V7.08, COMPILATION OF MODULE AT24C16
OBJECT MODULE PLACED IN at24c16.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE at24c16.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*************************************************
   2          *描述：
   3          *     AT24C16数据存取设置
   4          *功能：
   5          *     存储时间，探头个数，设置参数，计数率
   6          
   7          ************************************************/
   8          
   9          #include "STC12C5A60S2.h"
  10          #include "intrins.h"
  11          #include "config.h"
  12          
  13          void delay_n5ms_24(uchar idata n);
  14          
  15          
  16          /********开始函数****************/
  17          void start_24(void)     //时钟线保持高电平期间，数据线电平从高到低的跳变作为总线的起始信号
  18          {
  19   1           _nop_();
  20   1               scl = 0 ;
  21   1               sda = 1 ;
  22   1               scl = 1 ;
  23   1           _nop_();      
  24   1               sda = 0 ;
  25   1           _nop_();
  26   1           _nop_();
  27   1               scl = 0 ;
  28   1           _nop_();
  29   1           _nop_();
  30   1           sda = 1 ;
  31   1      }
  32          
  33          /*******结束函数****************/
  34          void stop_24(void)     //时钟线保持高电平期间，数据线电平从低到高的跳变作为总线的停止信号
  35          {
  36   1               scl = 0 ;
  37   1               sda = 0 ;
  38   1               scl = 1 ; _nop_() ;
  39   1               sda = 1 ; _nop_() ;
  40   1               scl = 0 ;
  41   1      }
  42          /*******************************
  43                  读8 Bit 数据
  44           ******************************/
  45          uchar read_8_bit_24(void)
  46          {
  47   1               uchar idata r_8_bit;
  48   1               uchar idata n;
  49   1               uchar idata m;
  50   1               uchar idata temp[8] = 0 ;
  51   1               
  52   1               r_8_bit = 0 ;
  53   1               scl = 0 ;scl = 1 ;
  54   1               for(n=0; n<8; n++)                                     //得到数据，由高到低位
  55   1                      {
C51 COMPILER V7.08   AT24C16                                                               04/11/2016 13:25:07 PAGE 2   

  56   2                              scl = 1 ;
  57   2                              _nop_() ;
  58   2                              temp[n] = sda ;
  59   2                              scl = 0 ;
  60   2                      }
  61   1               scl = 0 ;
  62   1               sda = 1 ;scl = 1 ; 
  63   1               _nop_() ; _nop_() ;
  64   1               scl = 0 ;                                                      //处理确认位
  65   1               
  66   1               for(m=0; m<8; m++)                                     //数据处理
  67   1                      {
  68   2                              r_8_bit = r_8_bit << 1 ;
  69   2                              if(temp[m]==1) r_8_bit = r_8_bit|0x01 ;
  70   2                              else r_8_bit = r_8_bit|0x00 ;
  71   2                      }
  72   1               return r_8_bit ;
  73   1      }
  74          
  75          /***************************************
  76                      写8 Bit 数据 x
  77          ****************************************/
  78          void write_8_bit_24(uchar idata x)
  79          {
  80   1               uchar idata w_8_bit;
  81   1               uchar idata n, m, a;
  82   1               uchar idata temp[8] = 0 ;
  83   1               w_8_bit = x ;
  84   1               
  85   1               for(n=0; n<8; n++)
  86   1                      {
  87   2                              a = w_8_bit&0x80 ;                              //高位在前
  88   2                              if(a==0x80) temp[n] = 1 ;
  89   2                              else temp[n] = 0 ;
  90   2                              w_8_bit = w_8_bit << 1 ;
  91   2                      }
  92   1               
  93   1               sda = 1 ;scl = 0 ;
  94   1               for(m=0; m<8; m++)                                             //先写高位
  95   1                      {
  96   2                              sda = temp[m] ;
  97   2                              scl = 1 ;
  98   2                              _nop_() ;
  99   2                              scl = 0 ;
 100   2                      }
 101   1               
 102   1               scl = 1 ; _nop_() ;
 103   1               scl = 0 ;                                                              //处理确认位
 104   1      
 105   1       }
 106          
 107          /************************************************************************
 108           *                         读1 Byte 数据
 109           * 输入参数：r_add      要读的数据的地址,格式为:1010+页码(3位)+0+地址(8位)
 110           * 返回参数：r_1_byte   读得到的数据
 111          **************************************************************************/
 112          uchar read_1_byte_24(uint idata r_add)
 113          {
 114   1               uchar idata r_1_byte ;
 115   1               uchar idata H , L, h;
 116   1               
 117   1               H = r_add / 256 ;                                              //得到高8位数据
C51 COMPILER V7.08   AT24C16                                                               04/11/2016 13:25:07 PAGE 3   

 118   1               L = r_add % 256 ;                                              //得到低8位数据
 119   1               h = H+1 ;                                                              //得到读指令的数据
 120   1               
 121   1               delay_n5ms_24(1);
 122   1               
 123   1               start_24();
 124   1               write_8_bit_24(H);                                             //发写指令
 125   1                      _nop_() ;_nop_() ;
 126   1              _nop_(); _nop_();
 127   1               write_8_bit_24(L);                                             //写入地址
 128   1                      _nop_() ;_nop_() ;
 129   1              _nop_(); _nop_();
 130   1               
 131   1               start_24();
 132   1               write_8_bit_24(h);                                             //发读命令
 133   1                      _nop_() ;_nop_() ;
 134   1              _nop_(); _nop_();
 135   1              
 136   1               r_1_byte = read_8_bit_24() ;                   //读得数据
 137   1                      _nop_() ;_nop_() ;
 138   1              _nop_(); _nop_();
 139   1               stop_24();
 140   1              
 141   1              return r_1_byte ;
 142   1      }
 143          
 144          /******************************************************************
 145           *                          写1 Byte 数据
 146           * 输入参数：w_add     写的地址，格式为:1010+页码(3位)+0+地址(8位)
 147           *                   w_1_byte  要写入的数据
 148          *******************************************************************/
 149          void write_1_byte_24(uint idata w_add , uchar idata w_1_byte)
 150          {
 151   1               uchar idata H,L;
 152   1               H = w_add / 256 ;
 153   1               L = w_add % 256 ;
 154   1               
 155   1               delay_n5ms_24(1);                                                      //加延时，解决了连续写要延时的问题
 156   1               
 157   1               start_24();
 158   1               write_8_bit_24(H);                                                     //发写指令,写高8位
 159   1                      _nop_() ;_nop_() ;
 160   1              _nop_(); _nop_();
 161   1               
 162   1               write_8_bit_24(L);                                                     //写入地址,写低8位
 163   1                      _nop_() ;_nop_() ;
 164   1              _nop_(); _nop_();
 165   1               
 166   1               write_8_bit_24(w_1_byte);                                      //写入数据
 167   1                      _nop_() ;_nop_() ; 
 168   1              _nop_(); _nop_();
 169   1               stop_24();
 170   1      
 171   1      }
 172          
 173          /************************************
 174           *        延时函数 5n ms
 175           ************************************/
 176          void delay_n5ms_24(uchar idata n)
 177          {
 178   1               uchar idata q ;
 179   1               uint idata p ;
C51 COMPILER V7.08   AT24C16                                                               04/11/2016 13:25:07 PAGE 4   

 180   1               for(q=0;q<n;q++)
 181   1               for(p=0;p<5000;p++){};
 182   1      }
 183          
 184          /*************************************
 185           *         存储数据
 186          *************************************/
 187          void DS_SaveData(uchar *dt)
 188          {
 189   1              uint data i;
 190   1              uint data w=0xa000;
 191   1              for(i=0;i<331;i++)
 192   1               {
 193   2                      write_1_byte_24(w,dt[i]);
 194   2              delay_n5ms_24(2);
 195   2              w++;
 196   2                      if(w==0xa100)
 197   2                  {
 198   3                        w=0xa200;
 199   3                        }
 200   2               }
 201   1      }  
 202          
 203          /*************************************
 204           *          读取数据
 205          *************************************/
 206          void DS_ReadData(uchar *dt)
 207          {
 208   1              uint data j;
 209   1              uint data w=0xa000;
 210   1              for(j=0;j<331;j++)
 211   1              {
 212   2                      dt[j]=read_1_byte_24(w);                                        //读取1Byte数据
 213   2              delay_n5ms_24(2);                                                       //延时2*5=10ms
 214   2              w++;
 215   2                      if(w==0xa100)
 216   2                  { 
 217   3                  w=0xa200;
 218   3                      }
 219   2              }
 220   1      }  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    638    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----      32
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
